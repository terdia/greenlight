// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/movies": {
            "get": {
                "description": "get all movies",
                "tags": [
                    "Movies"
                ],
                "summary": "Get all movies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "full text search by movie title",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "command seperated list e.g. crime,drama",
                        "name": "genres",
                        "in": "query"
                    },
                    {
                        "maximum": 10000000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "id",
                            "title",
                            "year",
                            "runtime",
                            "-id",
                            "-title",
                            "-year",
                            "-runtime"
                        ],
                        "type": "string",
                        "default": "id",
                        "description": "add - to sort in descing order",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/commons.ResponseObject"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ListMovieResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "422": {
                        "description": "status: fail",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/commons.ResponseObject"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ValidationError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "e.g. status: error, message: the error reason",
                        "schema": {
                            "$ref": "#/definitions/commons.ResponseObject"
                        }
                    }
                }
            },
            "post": {
                "description": "create a new movie with given details",
                "tags": [
                    "Movies"
                ],
                "summary": "Create new movie",
                "parameters": [
                    {
                        "description": "Update movie request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.MovieRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/commons.ResponseObject"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.SingleMovieResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "/v1/movies/QbPy4B7a2Lw1Kg7ogoEWj9k3NGMRVY"
                            }
                        }
                    },
                    "400": {
                        "description": "e.g. status: error, message: the error reason",
                        "schema": {
                            "$ref": "#/definitions/commons.ResponseObject"
                        }
                    },
                    "422": {
                        "description": "status: fail",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/commons.ResponseObject"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ValidationError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "e.g. status: error, message: the error reason",
                        "schema": {
                            "$ref": "#/definitions/commons.ResponseObject"
                        }
                    }
                }
            }
        },
        "/movies/{id}": {
            "get": {
                "description": "show details of a given movie",
                "tags": [
                    "Movies"
                ],
                "summary": "Show movie details by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id of the movie to show",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/commons.ResponseObject"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.SingleMovieResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "e.g. status: error, message: the error reason",
                        "schema": {
                            "$ref": "#/definitions/commons.ResponseObject"
                        }
                    },
                    "500": {
                        "description": "e.g. status: error, message: the error reason",
                        "schema": {
                            "$ref": "#/definitions/commons.ResponseObject"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete a given movie by Id",
                "tags": [
                    "Movies"
                ],
                "summary": "Delete a given movie",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id of the movie to delete",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/commons.ResponseObject"
                        }
                    },
                    "404": {
                        "description": "e.g. status: error, message: the error reason",
                        "schema": {
                            "$ref": "#/definitions/commons.ResponseObject"
                        }
                    },
                    "500": {
                        "description": "e.g. status: error, message: the error reason",
                        "schema": {
                            "$ref": "#/definitions/commons.ResponseObject"
                        }
                    }
                }
            },
            "patch": {
                "description": "update movie with given details",
                "tags": [
                    "Movies"
                ],
                "summary": "Update a given movie",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id of the movie to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update movie request",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/dto.MovieRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/commons.ResponseObject"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.SingleMovieResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "/v1/movies/QbPy4B7a2Lw1Kg7ogoEWj9k3NGMRVY"
                            }
                        }
                    },
                    "400": {
                        "description": "e.g. status: error, message: the error reason",
                        "schema": {
                            "$ref": "#/definitions/commons.ResponseObject"
                        }
                    },
                    "404": {
                        "description": "e.g. status: error, message: the error reason",
                        "schema": {
                            "$ref": "#/definitions/commons.ResponseObject"
                        }
                    },
                    "409": {
                        "description": "e.g. status: error, message: unable to update the record due to an edit conflict, please try again",
                        "schema": {
                            "$ref": "#/definitions/commons.ResponseObject"
                        }
                    },
                    "422": {
                        "description": "status: fail",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/commons.ResponseObject"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ValidationError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "e.g. status: error, message: the error reason",
                        "schema": {
                            "$ref": "#/definitions/commons.ResponseObject"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "create a new user with given details",
                "tags": [
                    "Users"
                ],
                "summary": "Create new user",
                "parameters": [
                    {
                        "description": "create user",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/commons.ResponseObject"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.SingleUserResponse"
                                        }
                                    }
                                }
                            ]
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "/v1/users/QbPy4B7a2Lw1Kg7ogoEWj9k3NGMRVY"
                            }
                        }
                    },
                    "400": {
                        "description": "e.g. status: error, message: the error reason",
                        "schema": {
                            "$ref": "#/definitions/commons.ResponseObject"
                        }
                    },
                    "422": {
                        "description": "status: fail",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/commons.ResponseObject"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.ValidationError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "e.g. status: error, message: the error reason",
                        "schema": {
                            "$ref": "#/definitions/commons.ResponseObject"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "commons.ResponseObject": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "description": "(success|fail|error)",
                    "type": "integer"
                }
            }
        },
        "data.Metadata": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer"
                },
                "first_page": {
                    "type": "integer"
                },
                "last_page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total_records": {
                    "type": "integer"
                }
            }
        },
        "dto.CreateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "unique email address",
                    "type": "string"
                },
                "name": {
                    "description": "fullname",
                    "type": "string"
                },
                "password": {
                    "description": "minimum 8 bytes maximum 72 bytes",
                    "type": "string"
                }
            }
        },
        "dto.ListMovieResponse": {
            "type": "object",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/data.Metadata"
                },
                "movies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.MovieResponse"
                    }
                }
            }
        },
        "dto.MovieRequest": {
            "type": "object",
            "properties": {
                "genres": {
                    "description": "unique genres e.g action,adventure... maximum 5 genres",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "runtime": {
                    "description": "e.g 98 mins",
                    "type": "integer"
                },
                "title": {
                    "description": "title for the movie, max length 500",
                    "type": "string"
                },
                "year": {
                    "description": "published year e.g. 2021, must not be in the future",
                    "type": "integer"
                }
            }
        },
        "dto.MovieResponse": {
            "type": "object",
            "properties": {
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "runtime": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "dto.SingleMovieResponse": {
            "type": "object",
            "properties": {
                "movie": {
                    "$ref": "#/definitions/dto.MovieResponse"
                }
            }
        },
        "dto.SingleUserResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/dto.UserResponse"
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "dto.ValidationError": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0.0",
	Host:        "localhost:4000",
	BasePath:    "/v1",
	Schemes:     []string{},
	Title:       "Greenlight API documentation",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
